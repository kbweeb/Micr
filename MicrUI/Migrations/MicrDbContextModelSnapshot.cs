// <auto-generated />
using System;
using MicrDbChequeProcessingSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MicrDbChequeProcessingSystem.git.Migrations
{
    [DbContext(typeof(MicrDbContext))]
    partial class MicrDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.AccountType", b =>
                {
                    b.Property<long>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountTypeId"));

                    b.Property<string>("AccountTypeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("AccountTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("AccountTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("AccountType", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.ApprovalStatus", b =>
                {
                    b.Property<long>("ApprovalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ApprovalStatusId"));

                    b.Property<string>("ApprovalStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ApprovalStatusId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("ApprovalStatus", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.Bank", b =>
                {
                    b.Property<long>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BankId"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Enabled");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SortCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BankId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("RegionId");

                    b.ToTable("Bank", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.BankBranch", b =>
                {
                    b.Property<long>("BankBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BankBranchId"));

                    b.Property<string>("BankBranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Enabled");

                    b.HasKey("BankBranchId");

                    b.HasIndex("BankId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("BankBranch", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.BookType", b =>
                {
                    b.Property<long>("BookTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BookTypeId"));

                    b.Property<long>("AccountTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("BookTypeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("BookTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("NumberOfLeafletId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionCodeId")
                        .HasColumnType("bigint");

                    b.HasKey("BookTypeId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("NumberOfLeafletId");

                    b.HasIndex("TransactionCodeId");

                    b.ToTable("BookType", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.Currency", b =>
                {
                    b.Property<long>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CurrencyId"));

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Symbol")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CurrencyId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Currency", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.CustomerProfile", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestingBankBranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("T24customerName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("T24CustomerName");

                    b.HasKey("CustomerId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("RequestingBankBranchId");

                    b.ToTable("CustomerProfile", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.NumberOfLeaflet", b =>
                {
                    b.Property<long>("NumberOfLeafletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NumberOfLeafletId"));

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NumberOfLeaflet1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NumberOfLeaflet");

                    b.HasKey("NumberOfLeafletId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("NumberOfLeaflet", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.RegionZone", b =>
                {
                    b.Property<long>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RegionId"));

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RegionId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Region(Zone)", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.Status", b =>
                {
                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StatusId"));

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.TransactionCode", b =>
                {
                    b.Property<long>("TransactionCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionCodeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TransactionCodeId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("TransactionCode", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.UserProfile", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime");

                    b.Property<long>("ApprovedStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApprovedUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("BankBranchId")
                        .HasColumnType("bigint");

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Firstname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("Is_Enabled");

                    b.Property<DateTime?>("LastPasswordUpdateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("Last_Password_Update_Date");

                    b.Property<int?>("NoOfTrials")
                        .HasColumnType("int")
                        .HasColumnName("No_Of_Trials");

                    b.Property<string>("Othername")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varbinary(250)");

                    b.Property<int?>("PasswordUpdateInterval")
                        .HasColumnType("int")
                        .HasColumnName("Password_Update_Interval");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("ApprovedStatusId");

                    b.HasIndex("ApprovedUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("UserProfile", (string)null);
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.AccountType", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("AccountTypes")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_AccountType_UserProfile");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.ApprovalStatus", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("ApprovalStatuses")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_ApprovalStatus_UserProfile");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.Bank", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("Banks")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Bank_UserProfile");

                    b.HasOne("MicrDbChequeProcessingSystem.Models.RegionZone", "Region")
                        .WithMany("Banks")
                        .HasForeignKey("RegionId")
                        .IsRequired()
                        .HasConstraintName("FK_Bank_Region(Zone)");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.BankBranch", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.Bank", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_BankBranch_Bank");

                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("BankBranches")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_BankBranch_UserProfile");

                    b.Navigation("Bank");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.BookType", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.AccountType", "AccountType")
                        .WithMany("BookTypes")
                        .HasForeignKey("AccountTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_BookType_AccountType");

                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("BookTypes")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_BookType_UserProfile");

                    b.HasOne("MicrDbChequeProcessingSystem.Models.NumberOfLeaflet", "NumberOfLeaflet")
                        .WithMany("BookTypes")
                        .HasForeignKey("NumberOfLeafletId")
                        .IsRequired()
                        .HasConstraintName("FK_BookType_NumberOfLeaflet");

                    b.HasOne("MicrDbChequeProcessingSystem.Models.TransactionCode", "TransactionCode")
                        .WithMany("BookTypes")
                        .HasForeignKey("TransactionCodeId")
                        .IsRequired()
                        .HasConstraintName("FK_BookType_TransactionCode");

                    b.Navigation("AccountType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("NumberOfLeaflet");

                    b.Navigation("TransactionCode");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.Currency", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("Currencies")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Currency_UserProfile");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.CustomerProfile", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("CustomerProfiles")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_CustomerProfile_UserProfile");

                    b.HasOne("MicrDbChequeProcessingSystem.Models.BankBranch", "RequestingBankBranch")
                        .WithMany("CustomerProfiles")
                        .HasForeignKey("RequestingBankBranchId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerProfile_BankBranch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("RequestingBankBranch");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.NumberOfLeaflet", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("NumberOfLeaflets")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_NumberOfLeaflet_UserProfile");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.RegionZone", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("RegionZones")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Region(Zone)_UserProfile");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.Status", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("Statuses")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Status_UserProfile");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.TransactionCode", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("TransactionCodes")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionCode_UserProfile");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.UserProfile", b =>
                {
                    b.HasOne("MicrDbChequeProcessingSystem.Models.ApprovalStatus", "ApprovedStatus")
                        .WithMany("UserProfiles")
                        .HasForeignKey("ApprovedStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProfile_ApprovalStatus");

                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "ApprovedUser")
                        .WithMany("InverseApprovedUser")
                        .HasForeignKey("ApprovedUserId")
                        .HasConstraintName("FK_UserProfile_UserProfile1");

                    b.HasOne("MicrDbChequeProcessingSystem.Models.UserProfile", "CreatedByUser")
                        .WithMany("InverseCreatedByUser")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProfile_UserProfile");

                    b.Navigation("ApprovedStatus");

                    b.Navigation("ApprovedUser");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.AccountType", b =>
                {
                    b.Navigation("BookTypes");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.ApprovalStatus", b =>
                {
                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.Bank", b =>
                {
                    b.Navigation("BankBranches");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.BankBranch", b =>
                {
                    b.Navigation("CustomerProfiles");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.NumberOfLeaflet", b =>
                {
                    b.Navigation("BookTypes");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.RegionZone", b =>
                {
                    b.Navigation("Banks");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.TransactionCode", b =>
                {
                    b.Navigation("BookTypes");
                });

            modelBuilder.Entity("MicrDbChequeProcessingSystem.Models.UserProfile", b =>
                {
                    b.Navigation("AccountTypes");

                    b.Navigation("ApprovalStatuses");

                    b.Navigation("BankBranches");

                    b.Navigation("Banks");

                    b.Navigation("BookTypes");

                    b.Navigation("Currencies");

                    b.Navigation("CustomerProfiles");

                    b.Navigation("InverseApprovedUser");

                    b.Navigation("InverseCreatedByUser");

                    b.Navigation("NumberOfLeaflets");

                    b.Navigation("RegionZones");

                    b.Navigation("Statuses");

                    b.Navigation("TransactionCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
